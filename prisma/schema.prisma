// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth models (NextAuth compatible)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // App relations
  clients       Client[]
  timeEntries   TimeEntry[]
  invoices      Invoice[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App data
enum BillingModel {
  MONTHLY
  PROJECT
}

model Client {
  id            String       @id @default(cuid())
  userId        String
  name          String
  email         String?
  domestic      Boolean      @default(true)
  tdsDeducts    Boolean      @default(true)
  billingModel  BillingModel @default(MONTHLY)
  hourlyRate    Int?         // ₹ per hour (for PROJECT or when billing hourly)
  monthlyAmount Int?         // ₹ per month (for MONTHLY retainers)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries   TimeEntry[]
  invoices      Invoice[]
}

model TimeEntry {
  id          String   @id @default(cuid())
  userId      String
  clientId    String
  description String
  startedAt   DateTime
  endedAt     DateTime
  hours       Decimal  @db.Decimal(10,2)
  hourlyRate  Int      // snapshot of rate at the time
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Invoice {
  id         String        @id @default(cuid())
  userId     String
  clientId   String
  month      Int           // 1-12
  year       Int
  subtotal   Int           // ₹
  gst        Int           // ₹
  tds        Int           // ₹
  total      Int           // ₹ (subtotal + gst - tds)
  status     String        @default("DRAFT")
  createdAt  DateTime      @default(now())
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  client     Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  items      InvoiceItem[]
  @@unique([userId, clientId, month, year])
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  hours       Decimal @db.Decimal(10,2)
  rate        Int     // ₹/hr
  amount      Int     // ₹
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}
